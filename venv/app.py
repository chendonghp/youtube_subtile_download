from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSlot
from YoutubePlaylistDownload import Ui_MainWindow
import sys
from YTubeSub import YTSubDownload,Video_ids
import os

class MainWindowUIClass(Ui_MainWindow):
    dir=""
    playlist_title=""
    video_ids=[]
    def __init__(self):
        '''Initialize the super class
        '''
        super().__init__()
        self.vids=Video_ids(playlist_url="")

    def setupUi(self, MW):
        ''' Setup the UI of the super class, and add here code
        that relates to the way we want our UI to operate.
        '''
        super().setupUi(MW)

        # close the lower part of the splitter to hide the
        # debug window under normal operations

    def debugPrint(self, msg):
        '''Print the message in the text edit at the bottom of the
        horizontal splitter.
        '''
        self.log.append(msg)

    # def check(self):
    #     if self.sender().isChecked():
    #         self.debugPrint('创建')
    #     else:
    #         self.debugPrint('不创建')

    def browse_slot(self):
        dir= QtWidgets.QFileDialog.getExistingDirectory(parent=None,
                                                        caption="choose directory",
                                                        directory='.',
                                                        options=QtWidgets.QFileDialog.ShowDirsOnly
                                                        )
        MainWindowUIClass.dir=dir
        self.debugPrint( "browse button pressed: "+dir )

    def dir_pressed_return_slot(self):
        MainWindowUIClass.dir=self.dir_text.text()
        if not os.path.isdir(MainWindowUIClass.dir):
            # self.la = QLabel('这里将会显示我们选择的按钮信息', self)
            msgBox=QtWidgets.QMessageBox()
            msgBox.setText("Directory "+MainWindowUIClass.dir +" doesn't exist. Create it!")
            msgBox.setIcon(QtWidgets.QMessageBox.Warning)
            create = msgBox.addButton('创建', QMessageBox.AcceptRole)
            escape = msgBox.addButton('取消', QMessageBox.RejectRole)
            msgBox.setDefaultButton(create)
            # cb = QCheckBox('记住此操作')
            # msgBox.setCheckBox(cb)
            # cb.stateChanged.connect(self.check)
            reply = msgBox.exec()
            if reply == QMessageBox.AcceptRole:
                self.debugPrint('你选择了创建！')
                os.mkdir(MainWindowUIClass.dir)
            elif reply == QMessageBox.RejectRole:
                self.debugPrint('你选择了取消！')
        self.debugPrint( "return key pressed in dir input text: " +MainWindowUIClass.dir)

    def url_return_pressed_slot(self):
        self.vids.playlist_url=self.url_text.text()
        self.debugPrint( "return key pressed in url input text: "+ self.vids.playlist_url)

    def resolve_playlist_slot(self):
        try:
            vids = Video_ids(self.vids.playlist_url)
            print(vids.playlist_url,vids._api_key)
            MainWindowUIClass.playlist_title, MainWindowUIClass.video_ids = vids.get_video_ids()
        except Exception as e:
            self.debugPrint("resolve button pressed: "+str(e))
        self.debugPrint( "resolve button pressed: "+ MainWindowUIClass.playlist_title )

    def download_subs_slot(self):
        try:
            MainWindowUIClass.dir=os.path.join(MainWindowUIClass.dir,MainWindowUIClass.playlist_title)
            [YTSubDownload(vid, dir=MainWindowUIClass.dir, proxies=None).sub_download() for vid in  MainWindowUIClass.video_ids]
        except Exception as e:
            self.debugPrint( "download button pressed: "+str(e) )
        self.debugPrint("download button pressed: " +"Download Completed")


def app():
    """
    This is the MAIN ENTRY POINT of our application.  The code at the end
    of the mainwindow.py script will not be executed, since this script is now
    our main program.   We have simply copied the code from mainwindow.py here
    since it was automatically generated by '''pyuic5'''.

    """
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = MainWindowUIClass()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


app()